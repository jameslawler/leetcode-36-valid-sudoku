const { isValidSudoku } = require("./index");

describe("Soduku Validator", () => {
  describe("when horizontal line is valid", () => {
    it("should return true", () => {
      const board = [
        ["1", "2", "3", ".", ".", "6", "7", ".", "9"],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
      ];

      const result = isValidSudoku(board);
      expect(result).toBe(true);
    });

    it("should return true", () => {
      const board = [
        ["1", "2", "3", ".", ".", "6", "7", ".", "9"],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", "3", ".", ".", "6", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
      ];

      const result = isValidSudoku(board);
      expect(result).toBe(true);
    });
  });

  describe("when horizontal line is invalid", () => {
    it("should return false", () => {
      const board = [
        ["1", "2", "3", ".", "3", "6", "7", ".", "9"],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
      ];

      const result = isValidSudoku(board);
      expect(result).toBe(false);
    });

    it("should return false", () => {
      const board = [
        ["1", "2", "3", ".", ".", "6", "7", ".", "9"],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", "4", "4", "5", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
      ];

      const result = isValidSudoku(board);
      expect(result).toBe(false);
    });
  });

  describe("when vertical line is valid", () => {
    it("should return true", () => {
      const board = [
        ["1", ".", ".", ".", ".", ".", ".", ".", "."],
        ["2", ".", ".", ".", ".", ".", ".", ".", "."],
        ["3", ".", ".", ".", ".", ".", ".", ".", "."],
        ["4", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        ["8", ".", ".", ".", ".", ".", ".", ".", "."],
        ["9", ".", ".", ".", ".", ".", ".", ".", "."],
      ];

      const result = isValidSudoku(board);
      expect(result).toBe(true);
    });

    it("should return true", () => {
      const board = [
        [".", "1", ".", ".", ".", ".", ".", ".", "."],
        ["2", ".", ".", ".", ".", ".", ".", ".", "."],
        ["3", ".", ".", ".", ".", ".", ".", ".", "."],
        ["4", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", "2", ".", ".", ".", ".", ".", ".", "."],
        [".", "3", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        ["8", ".", ".", ".", ".", ".", ".", ".", "."],
        ["9", ".", ".", ".", ".", ".", ".", ".", "."],
      ];

      const result = isValidSudoku(board);
      expect(result).toBe(true);
    });
  });

  describe("when vertical line is invalid", () => {
    it("should return false", () => {
      const board = [
        ["1", ".", ".", ".", ".", ".", ".", ".", "."],
        ["2", ".", ".", ".", ".", ".", ".", ".", "."],
        ["3", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        ["3", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
      ];

      const result = isValidSudoku(board);
      expect(result).toBe(false);
    });

    it("should return false", () => {
      const board = [
        ["1", ".", ".", ".", ".", ".", ".", ".", "."],
        ["2", ".", ".", ".", ".", ".", ".", ".", "."],
        ["3", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", "1", ".", ".", ".", ".", ".", ".", "."],
        [".", "1", ".", ".", ".", ".", ".", ".", "."],
        [".", "2", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
      ];

      const result = isValidSudoku(board);
      expect(result).toBe(false);
    });
  });

  describe("when small grid is valid", () => {
    it("should return true", () => {
      const board = [
        ["1", "2", ".", ".", ".", ".", ".", ".", "."],
        [".", "3", "5", ".", ".", ".", ".", ".", "."],
        [".", "4", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
      ];

      const result = isValidSudoku(board);
      expect(result).toBe(true);
    });
  });

  describe("when small grid is invalid", () => {
    it("should return false", () => {
      const board = [
        ["1", "2", ".", ".", ".", ".", ".", ".", "."],
        [".", "3", "5", ".", ".", ".", ".", ".", "."],
        [".", "5", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
      ];

      const result = isValidSudoku(board);
      expect(result).toBe(false);
    });
  });
});
